#!/usr/bin/env python3
"""
MailLLM - Setup-Skript
Installiert und konfiguriert das MailLLM-Projekt
"""

import os
import sys
import subprocess
from pathlib import Path


def run_command(command: str, description: str) -> bool:
    """F√ºhrt einen Befehl aus und gibt Status zur√ºck"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} erfolgreich")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} fehlgeschlagen: {e}")
        print(f"Fehlerausgabe: {e.stderr}")
        return False


def check_python_version() -> bool:
    """√úberpr√ºft die Python-Version"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python 3.8+ erforderlich, aber {version.major}.{version.minor} gefunden")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} gefunden")
    return True


def install_dependencies() -> bool:
    """Installiert die Python-Abh√§ngigkeiten"""
    return run_command("pip3 install -r requirements.txt", "Installiere Python-Abh√§ngigkeiten")


def create_env_file() -> bool:
    """Erstellt die .env Datei aus der Vorlage"""
    if os.path.exists('.env'):
        print("‚ÑπÔ∏è  .env Datei existiert bereits")
        return True
    
    if not os.path.exists('env.example'):
        print("‚ùå env.example nicht gefunden")
        return False
    
    try:
        with open('env.example', 'r') as src, open('.env', 'w') as dst:
            dst.write(src.read())
        print("‚úÖ .env Datei aus env.example erstellt")
        return True
    except Exception as e:
        print(f"‚ùå Fehler beim Erstellen der .env Datei: {e}")
        return False


def create_mail_directory() -> bool:
    """Erstellt das E-Mail-Verzeichnis"""
    try:
        mail_dir = Path('mails')
        mail_dir.mkdir(exist_ok=True)
        print("‚úÖ E-Mail-Verzeichnis 'mails' erstellt")
        return True
    except Exception as e:
        print(f"‚ùå Fehler beim Erstellen des E-Mail-Verzeichnisses: {e}")
        return False


def make_scripts_executable() -> bool:
    """Macht die Python-Skripte ausf√ºhrbar"""
    scripts = ['mail_downloader.py', 'mail_search.py', 'llm_integration_example.py']
    
    for script in scripts:
        if os.path.exists(script):
            try:
                os.chmod(script, 0o755)
                print(f"‚úÖ {script} ausf√ºhrbar gemacht")
            except Exception as e:
                print(f"‚ö†Ô∏è  Konnte {script} nicht ausf√ºhrbar machen: {e}")
    
    return True


def test_installation() -> bool:
    """Testet die Installation"""
    print("\nüß™ Teste Installation...")
    
    # Teste Import der Hauptmodule
    try:
        import dotenv
        print("‚úÖ python-dotenv importiert")
    except ImportError:
        print("‚ùå python-dotenv nicht verf√ºgbar")
        return False
    
    try:
        import tqdm
        print("‚úÖ tqdm importiert")
    except ImportError:
        print("‚ùå tqdm nicht verf√ºgbar")
        return False
    
    try:
        import html2text
        print("‚úÖ html2text importiert")
    except ImportError:
        print("‚ùå html2text nicht verf√ºgbar")
        return False
    
    # Teste EWS/POP3-Bibliotheken
    try:
        from exchangelib import Credentials
        print("‚úÖ exchangelib verf√ºgbar")
    except ImportError:
        print("‚ö†Ô∏è  exchangelib nicht verf√ºgbar (EWS deaktiviert)")
    
    try:
        import poplib
        print("‚úÖ poplib verf√ºgbar (Standardbibliothek)")
    except ImportError:
        print("‚ö†Ô∏è  poplib nicht verf√ºgbar (POP3 deaktiviert)")
    
    # Teste Standardbibliotheken
    try:
        import email
        print("‚úÖ email (Standardbibliothek) verf√ºgbar")
    except ImportError:
        print("‚ö†Ô∏è  email nicht verf√ºgbar")
    
    return True


def show_next_steps():
    """Zeigt die n√§chsten Schritte an"""
    print("\n" + "="*60)
    print("üéâ MailLLM Setup abgeschlossen!")
    print("="*60)
    
    print("\nüìã N√§chste Schritte:")
    print("1. Bearbeite die .env Datei mit deinen E-Mail-Zugangsdaten:")
    print("   nano .env")
    print("\n2. Teste den E-Mail-Download:")
    print("   python3 mail_downloader.py")
    print("\n3. Suche in deinen E-Mails:")
    print("   python3 mail_search.py --search 'Meeting'")
    print("\n4. Erstelle eine Zusammenfassung:")
    print("   python3 mail_search.py --summary")
    print("\n5. Exportiere f√ºr LLM:")
    print("   python3 mail_search.py --export")
    print("\n6. Teste LLM-Integration (optional):")
    print("   python3 llm_integration_example.py")
    
    print("\nüîß Konfiguration:")
    print("- EWS (Exchange Web Services): Standard f√ºr M365")
    print("- POP3: Alternative f√ºr √§ltere Systeme")
    print("- Verwende App-Passw√∂rter f√ºr bessere Sicherheit")
    
    print("\nüìö Dokumentation:")
    print("- README.md: Projekt√ºbersicht")
    print("- mail_downloader.py: Hauptprogramm")
    print("- mail_search.py: Such- und Exportfunktionen")
    print("- llm_integration_example.py: LLM-Integration")


def main():
    """Hauptfunktion"""
    print("üöÄ MailLLM - Setup-Skript")
    print("="*40)
    
    # Python-Version pr√ºfen
    if not check_python_version():
        sys.exit(1)
    
    # Abh√§ngigkeiten installieren
    if not install_dependencies():
        print("‚ùå Installation der Abh√§ngigkeiten fehlgeschlagen")
        sys.exit(1)
    
    # .env Datei erstellen
    if not create_env_file():
        print("‚ùå Erstellung der .env Datei fehlgeschlagen")
        sys.exit(1)
    
    # E-Mail-Verzeichnis erstellen
    if not create_mail_directory():
        print("‚ùå Erstellung des E-Mail-Verzeichnisses fehlgeschlagen")
        sys.exit(1)
    
    # Skripte ausf√ºhrbar machen
    make_scripts_executable()
    
    # Installation testen
    if not test_installation():
        print("‚ùå Installationstest fehlgeschlagen")
        sys.exit(1)
    
    # N√§chste Schritte anzeigen
    show_next_steps()


if __name__ == "__main__":
    main() 